Git 강의 정리

데이터 요청: 클라이언트
데이터 반환: 서버

내가 있는 곳: 로컬
멀리 있는 곳: 리모트
-> 내가 보고 있는 컴퓨터: 로컬 컴퓨터
-> 내 컴퓨터가 아닌 다른 컴퓨터: 리모트
Git: 내가 보고 있는 로컬 컴퓨터에서 돌아가는 버전관리 프로그램
Github: 원격에서 다른 사람의 컴퓨터에 이 버전들을 저장해놓는 저장소
-> 둘이 다름!!
버전 관리 프로그램: git, svn 등
저장소: github, gitlab, bitbucket

git config<- 유저명과 이메일을 정하는 명령어
config 뒤에 global이라는 명령어가 붙는 것은 앞으로 이 컴퓨터에서 
깃으로 관리하는 모든 프로젝트는 이 유저네임으로 하겠다는 의미

CLI: Command Line Interface(cmd)
-> 명령어를 실행할 수 있는 프로그램
CLI를 통해 git을 다룸
<폴더 이동 방법>
cmd에서 특정 폴더로 들어가고 싶다-> cd 파일명 입력
dir-> 해당 디렉토리에 있는 파일들 모두 보여줌
들어가있는 폴더에서 나가고 싶다-> cd ..
mkdir 파일명-> 파일이 생김

-git init: 프로젝트 실행 후 최초 1회만 진행
새로운 Git 저장소를 초기화함
실행하면 현재 디렉토리가 Git 프로젝트로 전환되며, .git이라는 숨김 폴더가 생성됨
이 .git 폴더에는 Git에서 버전 관리를 위해 사용하는 데이터와 설정이 저장됨

-git add
변경된 파일을 스테이징 영역(Stage)에 추가함
커밋 전, 어떤 변경 사항을 저장할지 선택하는 과정
=> 특정 파일 추가 git add 파일명
=> 모든 파일 추가 git add .

-git commit
스테이징된 변경 사항을 Git 저장소에 저장
각 커밋은 특정 시점의 코드 상태를 기록하며, 고유한 커밋 해시가 생성됨
커밋 메시지를 통해 변경 내용을 설명할 수 있음
=> git commit -m "커밋 메시지"
-m 옵션은 메시지를 바로 작성할 수 있도록 함
커밋 메시지는 코드 변경의 이유와 목적을 명확히 기록하는 것이 좋음

-git log
커밋 히스토리를 확인
누가, 언제, 어떤 메시지와 함께 커밋했는지 알 수 있음
=> git log --oneline 한 줄로 요약된 히스토리 보여줌
=> git log --stat 각 커밋에 대한 파일 변경 내역과 통계를 제공







채팅은 하나의 폴더에 쭉 기록
쪽지는 요청이 올 때마다 새로운 파일 만들어서 처리
늦어도 노 상관, 동시에 100개와도 늦게 처리 가능
파이어베이스로 구현

























